var g_sourceLines = [
'///////////////////////////////////',
'// Assertion for testcase',
'///////////////////////////////////',
'',
'module my_assertion (my_interface intf);',
'///////////////////////////////////////////////',
'//@ Assertion for test protocol ',
'///////////////////////////////////////////////',
'',
'	// check reset //  disable iff(!pin): disable assertion testing if "pin" is low',
'	 AP_RESET_CHECK: 	cover property (@(posedge intf.clk)	  	 (intf.enable !=0)  |-&gt; (intf.cs == 0 )) ;//else $display("[%t ns]reset wrong",$time());	// test',
'',
'	// Check CS',
'	 AP_CS_CHECK: 		cover property (@(posedge intf.sclk)     (intf.reset !=0)  	|-&gt; (intf.cs == 0 ));',
'',
'	// Check SCLK:(Using method "$stable" to check data which change in posedge of SCLK, Check CPOL and CPHA is true with mode SPI)',
'',
'	// Check command include SINGLE, DUAL, QUAD',
'	genvar i;',
'	generate',
'		for(i = 0; i&lt;8; i++) // with 8 clycle',
'		begin',
'			AP_COMMAND_CHECK:	cover property(@(posedge intf.sclk)		 ((intf.cs ==0) &amp;&amp; (intf.cpol == 0) &amp;&amp; (intf.cpha == 0))',
'	 									 	    									|-&gt;		(intf.command[i] ==  intf.sio0 )); // Check value command',
'																			// else $error("assertion failed at command"); ',
'		end',
'	endgenerate',
'',
'',
'// 	// Check address ',
'// 	AP_ADDRESS_CHECK:',
'',
'// 	// Check dummy',
'// 	AP_DUMMY_CHECK:',
'',
'// //////////////////////////////////////////////',
'// // Assertion for check data ',
'// // Check data',
'// //////////////////////////////////////////////',
'',
'// 	// Check signal',
' 	AP_SIGNAL_DONE_CHECK: cover property (@(posedge intf.clk) 		((intf.cs != 1) &amp;&amp;(intf.reset != 0) &amp;&amp; (intf.enable != 0)) |-&gt; (intf.done != 0)	);',
'',
'',
'// 	// Check data',
'// 	AP_DATA_CHECK:',
'',
'endmodule',
''
];
countinueBuildStmtTable(g_sourceLines);
