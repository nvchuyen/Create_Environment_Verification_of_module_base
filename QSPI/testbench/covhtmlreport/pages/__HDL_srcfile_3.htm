
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>///////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// Assertion for testcase</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>///////////////////////////////////</q-m>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a><q-w>module</q-w> my_assertion (my_interface intf);
<a name="6"><q-n>     6  </q-n></a><q-m>///////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>//@ Assertion for test protocol </q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>///////////////////////////////////////////////</q-m>
<a name="9"><q-n>     9  </q-n></a>
<a name="10"><q-n>     10  </q-n></a>	<q-m>// check reset //  disable iff(!pin): disable assertion testing if "pin" is low</q-m>
<a name="11"><q-n>     11  </q-n></a>	 AP_RESET_CHECK: 	<q-w>cover</q-w> <q-w>property</q-w> (@(<q-a>posedge</q-w> intf.clk)	  	 (intf.enable !=0)  |-&gt; (intf.cs == 0 )) ;<q-m>//else $display("[%t ns]reset wrong",$time());	// test</q-m>
<a name="12"><q-n>     12  </q-n></a>
<a name="13"><q-n>     13  </q-n></a>	<q-m>// Check CS</q-m>
<a name="14"><q-n>     14  </q-n></a>	 AP_CS_CHECK: 		<q-w>cover</q-w> <q-w>property</q-w> (@(<q-a>posedge</q-w> intf.sclk)     (intf.reset !=0)  	|-&gt; (intf.cs == 0 ));
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>	<q-m>// Check SCLK:(Using method "$stable" to check data which change in posedge of SCLK, Check CPOL and CPHA is true with mode SPI)</q-m>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>	<q-m>// Check command include SINGLE, DUAL, QUAD</q-m>
<a name="19"><q-n>     19  </q-n></a>	<q-w>genvar</q-w> i;
<a name="20"><q-n>     20  </q-n></a>	<q-w>generate</q-w>
<a name="21"><q-n>     21  </q-n></a>		<q-w>for</q-w>(i = 0; i&lt;8; i++) <q-m>// with 8 clycle</q-m>
<a name="22"><q-n>     22  </q-n></a>		<q-w>begin</q-w>
<a name="23"><q-n>     23  </q-n></a>			AP_COMMAND_CHECK:	<q-w>cover</q-w> <q-w>property</q-w>(@(<q-a>posedge</q-w> intf.sclk)		 ((intf.cs ==0) &amp;&amp; (intf.cpol == 0) &amp;&amp; (intf.cpha == 0))
<a name="24"><q-n>     24  </q-n></a>	 									 	    									|-&gt;		(intf.command[i] ==  intf.sio0 )); <q-m>// Check value command</q-m>
<a name="25"><q-n>     25  </q-n></a>																			<q-m>// else $error("assertion failed at command"); </q-m>
<a name="26"><q-n>     26  </q-n></a>		<q-w>end</q-w>
<a name="27"><q-n>     27  </q-n></a>	<q-w>endgenerate</q-w>
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a><q-m>// 	// Check address </q-m>
<a name="31"><q-n>     31  </q-n></a><q-m>// 	AP_ADDRESS_CHECK:</q-m>
<a name="32"><q-n>     32  </q-n></a>
<a name="33"><q-n>     33  </q-n></a><q-m>// 	// Check dummy</q-m>
<a name="34"><q-n>     34  </q-n></a><q-m>// 	AP_DUMMY_CHECK:</q-m>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a><q-m>// //////////////////////////////////////////////</q-m>
<a name="37"><q-n>     37  </q-n></a><q-m>// // Assertion for check data </q-m>
<a name="38"><q-n>     38  </q-n></a><q-m>// // Check data</q-m>
<a name="39"><q-n>     39  </q-n></a><q-m>// //////////////////////////////////////////////</q-m>
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a><q-m>// 	// Check signal</q-m>
<a name="42"><q-n>     42  </q-n></a> 	AP_SIGNAL_DONE_CHECK: <q-w>cover</q-w> <q-w>property</q-w> (@(<q-a>posedge</q-w> intf.clk) 		((intf.cs != 1) &amp;&amp;(intf.reset != 0) &amp;&amp; (intf.enable != 0)) |-&gt; (intf.done != 0)	);
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a>
<a name="45"><q-n>     45  </q-n></a><q-m>// 	// Check data</q-m>
<a name="46"><q-n>     46  </q-n></a><q-m>// 	AP_DATA_CHECK:</q-m>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
